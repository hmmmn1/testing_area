precision mediump float;
// From vertex
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;
uniform vec3 LightPosition_worldspace;

//
uniform sampler2D myTextureSampler;

void main()
{
	// todo
	vec3 Ambience = vec3(0.1,0.1,0.1);
	// light diffuse and light specular
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 50.0;
	// material properties
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);
	vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = Ambience * MaterialDiffuseColor;
	// length
	float distance = length( LightPosition_worldspace - Position_worldspace );
	// normalize
	vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDirection_cameraspace );
	// cos between light and surface
	float cosTheta = abs( dot( n,l ));

	// eye vector
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// cos of reflection
	float cosAlpha = clamp(dot(E,R),0.0,1.0);

	gl_FragColor.rgb = MaterialAmbientColor + 
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance) +
		MaterialDiffuseColor * LightColor * LightPower * pow(cosAlpha,8.) / (distance * distance);
}

