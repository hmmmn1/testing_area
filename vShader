// input
attribute vec3 vPosition_m;
attribute vec2 vertexUV;
attribute vec3 vNormal_m;
// constants
uniform mat4 vMVP;
uniform mat4 M;
uniform mat4 V;
uniform vec3 LightPosition_worldspace2;
// output
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;

void main()
{
	gl_Position = vMVP * vec4(vPosition_m,1);
	UV = vertexUV;

	Position_worldspace = (M * vec4(vPosition_m,1)).xyz;
	Normal_cameraspace = ( V * M * vec4(vNormal_m,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	EyeDirection_cameraspace = vec3(0,0,0) - ( V * M * vec4(vPosition_m,1)).xyz;
	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace2,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
}

